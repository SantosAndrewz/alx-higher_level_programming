==============================
How to use 2-matrix_divided.py
==============================

Module tests the functionality of function ''matrix_divided(matrix, div)''

Usage
=====

''matrix_divided(...)'' returns a new matrix which ia a copy of the parameter
''matrix'' divided by ''div''.

Quotients rounded to a maximum of two decimal places.

Regular divisions:
==================

::


	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [[2, 4, 6], [8, 10, 12]]
        >>> print(matrix_divided(matrix, 2))
        [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

::

	>>> print(matrix_divided(matrix, 4))
        [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]


For floats and integers
=======================

::
        >>> matrix = [[2.4, 4.4, 6.4], [8.4, 10.4, 12.4]]
        >>> print(matrix_divided(matrix, 2))
        [[1.2, 2.2, 3.2], [4.2, 5.2, 6.2]]


::

	>>> matrix = [[2.4, 4.444, 6], [8.4, 10.444, 12]]
	>>> print(matrix_divided(matrix, 2))
        [[1.2, 2.22, 3.0], [4.2, 5.22, 6.0]]


For incorrect matrix types
==========================

A TypeError is raised

None as a matrix

::


	>>> matrix = None
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

String as a matrix

::


	>>> matrix = 'Hello'
        >>> print(matrix_divided(matrix, 2))
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Empty list

::


	>>> matrix = []
        >>> print(matrix_divided(matrix, 2))
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

List of empty lists

::


        >>> matrix = [[], []]
        >>> print(matrix_divided(matrix, 2))
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats


List of tuples

::


        >>> matrix = [(), ()]
        >>> print(matrix_divided(matrix, 2))
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Single list

::


	>>> matrix = [2, 4, 6]
        >>> print(matrix_divided(matrix, 2))
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Different sizes of the rows

::

	>>> matrix = [[2, 4, 6, 8], [10, 12, 14]]
        >>> print(matrix_divided(matrix, 2))
        Traceback (most recent call last):
        TypeError: Each row of the matrix must have the same size

For invalid div
===============

div must not be zero, otherwise raie a ZeroDivisionErroe.
Also raises a TypeError when div value is not a float or integer.

::

	>>> matrix = [[2, 4, 6], [10, 12, 14]]
	>>> print(matrix_divided(matrix, None))
        Traceback (most recent call last):
        TypeError: div must be a number

::


	>>> print(matrix_divided(matrix, 'Hello'))
        Traceback (most recent call last):
        TypeError: div must be a number

::


	>>> print(matrix_divided(matrix, 0))
        Traceback (most recent call last):
        ZeroDivisionError: division by zero

::

	>>> print(matrix_divided(matrix, float('inf')))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

::

        >>> print(matrix_divided([[2, 4, float('inf')], [6, 8, 10]], 2))
	[[1.0, 2.0, inf], [3.0, 4.0, 5.0]]

Missing arguments
=================

::

	>>> print(matrix_divided(matrix))
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

::

        >>> print(matrix_divided())
        Traceback (most recent call last):
        TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

NaN
===

::

	>>> print(matrix_divided([[2, 4, float('nan')], [6, 8, 10]], 2))
	[[1.0, 2.0, nan], [3.0, 4.0, 5.0]]

::

	>>> print(matrix_divided([[2, 4, float('inf')], [6, 8, 10]], float('nan')))
	Traceback (most recent call last):
        TypeError: div must be a number
