#!/usr/bin/python3
"""
unittests for function add_integer.
"""
import unittest
from add_integer import add_integer


class Test_AddInteger(unittest.TestCase):
    """
    Test cases for the function- add_integer.
    """

    def test_regular_integers_input(self):
        """
        Tests for correct sum when 2 integers are entered.
        """

        self.assertEqual(add_integer(2, 3), 5)
        self.assertEqual(add_integer(-2, 3), 1)
        self.assertEqual(add_integer(-2, -3), -5)

    def test_float_casting(self):
        """
        Tests for correct sum when floats digits are entered.
        """

        self.assertEqual(add_integer(2.5, 3.5), 5)
        self.assertEqual(add_integer(-2.3, 3.3), 1)
        self.assertEqual(add_integer(-2, 3.5), 1)

    def test_non_integer_input(self):
        """
        Tests for correct sum when float and integer are entered.
        """

        self.assertEqual(add_integer(2.5, 3), 5)
        self.assertEqual(add_integer(-2.5, 3), 0)
        self.assertEqual(add_integer(3, 2.5), 5)
        self.assertEqual(add_integer(-2, 2.5), 0)

    def test_missing_arguments(self):
        """
        Tests for correct sum when only value of a is entered.
        """

        self.assertEqual(add_integer(2), 100)
        with self.assertRaises(TypeError) as entries:
            add_integer(None, 2)
        self.assertEqual(str(entries.exception), "a must be an integer")

        with self.assertRaises(TypeError) as entries:
            add_integer(None)
        self.assertEqual(str(entries.exception), "a must be an integer")

    def test_non_integer_input(self):
        """
        Tests for correct raise of TypeError when non-integer are entered.
        """

        with self.assertRaises(TypeError) as entries:
            add_integer(2, "test")
        self.assertEqual(str(entries.exception), "b must be an integer")

        with self.assertRaises(TypeError) as entries:
            add_integer(None, 2)
        self.assertEqual(str(entries.exception), "a must be an integer")

        with self.assertRaises(TypeError) as entries:
            add_integer(2, [2])
        self.assertEqual(str(entries.exception), "b must be an integer")

        with self.assertRaises(TypeError) as entries:
            add_integer((2,), 2)
        self.assertEqual(str(entries.exception), "a must be an integer")


if __name__ == "__main__":
    unittest.main()
